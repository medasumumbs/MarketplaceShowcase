/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package codegen.ru.muravin.marketplaceshowcase.paymentService.api;

import codegen.ru.muravin.marketplaceshowcase.paymentService.model.Balance;
import codegen.ru.muravin.marketplaceshowcase.paymentService.model.PaymentResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import jakarta.validation.*;
import jakarta.validation.constraints.*;

@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * GET /users/{userId} : Получить баланс пользователя
     *
     * @param userId Идентификатор пользователя (required)
     * @return Успешный ответ (status code 200)
     *         or Пользователь не найден (status code 404)
     *         or Внутренняя ошибка сервера (status code 5XX)
     *         or Неизвестная ошибка при выяснении баланса (status code 200)
     */
    @Operation(
            operationId = "usersUserIdGet",
            summary = "Получить баланс пользователя",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Успешный ответ", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Balance.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Пользователь не найден"),
                    @ApiResponse(responseCode = "5XX", description = "Внутренняя ошибка сервера"),
                    @ApiResponse(responseCode = "default", description = "Неизвестная ошибка при выяснении баланса")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/users/{userId}",
            produces = { "application/json" }
    )

    default Mono<ResponseEntity<Balance>> usersUserIdGet(
            @Parameter(name = "userId", description = "Идентификатор пользователя", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
            @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"balance\" : 101.15 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /users/{userId}/makePayment : Совершить платеж (совершить списание денег со счёта)
     *
     * @param sum  (required)
     * @param userId Идентификатор пользователя (required)
     * @return Успешный ответ (status code 200)
     *         or Пользователь не найден (status code 404)
     *         or Внутренняя ошибка сервера (status code 5XX)
     *         or Неизвестная ошибка при выполнении платежа (status code 200)
     */
    @Operation(
            operationId = "usersUserIdMakePaymentPost",
            summary = "Совершить платеж (совершить списание денег со счёта)",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Успешный ответ", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Пользователь не найден"),
                    @ApiResponse(responseCode = "5XX", description = "Внутренняя ошибка сервера"),
                    @ApiResponse(responseCode = "default", description = "Неизвестная ошибка при выполнении платежа")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/users/{userId}/makePayment",
            produces = { "application/json" }
    )

    default Mono<ResponseEntity<PaymentResponse>> usersUserIdMakePaymentPost(
            @NotNull @Parameter(name = "sum", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sum", required = true) Float sum,
            @Parameter(name = "userId", description = "Идентификатор пользователя", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId,
            @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"restBalance\" : 0, \"message\" : \"OK\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
